<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<bean id = "chemistry" class="kevin.context.beans.SubjectBean">
		<property name="subjectName" value="化学"/>
	</bean>
	<context:component-scan base-package="kevin.aop"/>

	<!--
	expose-proxy: 有时候目标对象内部的自我调用将无法实施切面中的增强
	如 service 层里面  this.xxx() 调用将不会触发切面,这时候可以设置expose-proxy = true ，service 里面这样调用
	 ((xxxDao)AopContext.currentProxy()).xxx(); 即可

	 proxy-target-class
	 	true ： 使用cglib代理
		Spring AOP 部分使用JDK动态代理或者 CGLIB 来为目标对象创建代理。（建议尽量使用JDK的动态代理），
		如果被代理的目标对象实现了至少一个接口，则会使用 JDK动态代理，所有该目标类型实现的接口都将被代理。
		若该目标对象没有实现任何接口，则创建一个 CGLIB 代理。如果你希望强制使用 CGLIB 代理，
		（例如希望代理目标对象的所有方法，而不只是实现自接口的方法）那也可以。但是需要考虑以下两个问题
		1.无法通知（advise）Final方法,因为要他们不能被复写，无法通知Final 修饰的类，因为他们无法被子类继承重写方法。
		2.你需要将 CGLIB 二进制发行包放在 classpath 下面。


		实际使用的过程中还是有些差别的:
			JDK 动态代理：其代表对象必须是某个接口的实现，它是通过在运行期间创建一个接口的实现类来完成对目标对象的代理
			CGLIB代理:实现原理类似于 JDK 动态代理，只是它在运行期间生成的代理对象是针对目标类扩展的子类。
			CGLIB 是高效的代码生成包，底层是依靠ASM(开源的 Java 字节码编辑类库)操作字节码实现的，性能比 JDK强
	-->
	<aop:aspectj-autoproxy
			proxy-target-class="true"
			expose-proxy="true"/>
</beans>
